@function toRem($value) {
    $remValue: math.div($value, 16) + rem;
    @return $remValue;
}

$breakpoints: (
    xxs: 354px,
    xs: 576px,
    sm: 768px,
    md: 992px,
    lg: 1200px,
    // this is the default width on 15' macbook
    xl: 1792px,
    xxl: 2000px,
);

// =========================================================
// SPACING
// =========================================================

$sp1: toRem(2);
$sp2: toRem(4);
$sp3: toRem(8);
$sp4: toRem(16);
$sp5: toRem(24);
$sp6: toRem(32);
$sp7: toRem(48);
$sp8: toRem(64);
$sp9: toRem(96);
$sp10: toRem(144);
$sp11: toRem(192);

@mixin fullScreenImg() {
    background-position: bottom !important;
    background-repeat: no-repeat !important;
    background-size: cover !important;
}

@mixin ellipsis($width: auto) {
    width: $width;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin fullHeight() {
    height: 100vh;
    height: calc(var(--vh, 1vh) * 100);
}

/* Media query stuff */

@mixin size-above($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);
        @media (min-width: $breakpoint-value) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

@mixin mobile() {
    @include size-below(sm) {
        @content;
    }
}

@mixin size-below($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);
        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

@mixin spin() {
    animation: loading-spinner 0.8s linear infinite;
}

@mixin pop($delay: 0) {
    animation: pop 650ms ease-out $delay;
}

@mixin loading-spinner(
    $size: 1.2em,
    $offset: 0.6em,
    $spinner-color: #191919,
    $background-image: "../assets/spinner.svg"
) {
    position: relative;

    &::after {
        content: "";
        display: block;
        width: $size;
        height: $size;
        position: absolute;
        // border: 3px solid;
        opacity: 0.5;
        background-image: url($background-image);
        left: calc(50% - #{$offset});
        top: calc(50% - #{$offset});
        transform-origin: 50% 50%;
        @include spin();
        color: $spinner-color;
        z-index: 10;
    }
}

@keyframes loading-spinner {
    to {
        transform: rotate(360deg);
    }
}

@keyframes pop {
    60% {
        transform: scale(1.2);
    }
    100% {
        transform: scale(1);
    }
}

@mixin gold() {
    color: #ffffff;
    border: none;
    background: linear-gradient(
        to bottom,
        #cfc09f 22%,
        #ffecb3 30%,
        #cfc09f 40%,
        #cfc09f 50%,
        #634f2c 78%
    );
    animation: shimmer 15s ease-in-out infinite;
    background-size: 120% 120%;
}

@keyframes shimmer {
    0% {
        background-position: 0 0%;
    }
    50% {
        background-position: 0 75%;
    }
    100% {
        background-position: 0 0%;
    }
}

/* z-index stuff */

/* 
    Add items to this map in the order that they need to stack in the UI 
    then apply z-index using the z-index mixin and the real z-indexes will 
    be sorted out magically
*/
$z-indexed-items: (
    "global": (
        "fab",
        "menu",
    ),
);

$z-index-map: ();

@each $group-name, $group-list in $z-indexed-items {
    $counter: 1;
    $group-map: ();
    @each $item in $group-list {
        $group-map: map-merge(
            $group-map,
            (
                $item: $counter,
            )
        );
        $counter: $counter + 1;
    }
    $z-index-map: map-merge(
        $z-index-map,
        (
            $group-name: $group-map,
        )
    );
}

@mixin z-index($key, $group: "global") {
    @if map-has-key($z-index-map, $group) {
        @if map-has-key(map-get($z-index-map, $group), $key) {
            z-index: map-get(map-get($z-index-map, $group), $key);
        } @else {
            @error ('@include z-index() expects $key to be found in map z-indexed-items #{$group}, given `#{$key}`');
        }
    } @else {
        @error ('@include z-index() expects $group to be found in map z-indexed-items, given `#{$group}`');
    }
}

$shadow-level-1: 0 2px 5px 0 rgba(25, 25, 25, 0.3);
$shadow-level-2: 0 2px 10px 0 rgba(25, 25, 25, 0.3);
$shadow-level-3: 2px 6px 12px 0 rgba(25, 25, 25, 0.55);

@mixin box-shadow($level) {
    @if $level == 1 {
        box-shadow: $shadow-level-1;
    } @else if $level == 2 {
        box-shadow: $shadow-level-2;
    } @else if $level == 3 {
        box-shadow: $shadow-level-3;
    } @else {
        @error ('box-shadow $level does not exist!');
    }
}

@mixin nice-scrollbar() {
    &::-webkit-scrollbar {
        background-color: transparent;
        width: 5px;
    }

    &::-webkit-scrollbar-track {
        background-color: transparent;
    }

    &::-webkit-scrollbar-thumb {
        // background-color: rgba(34, 167, 242, 0.4);
        background-color: var(--scrollbar-bg);
        border-radius: 2px;
    }

    overflow-y: overlay;
    scrollbar-color: var(--scrollbar-bg) transparent;
    scrollbar-width: thin;
}

@mixin unread() {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--accent);
    text-shadow: 1px 1px 1px var(--accentDarker);
    border-radius: 12px;
    @include font(bold, normal, fs-50);
    color: #ffffff;
    min-width: $sp5;
    padding: 0 $sp2;
    height: $sp5;
}

@mixin constrain($padding-horizontal: toRem(160), $padding-vertical: 0) {
    max-width: 1400px;
    margin: 0 auto;
    width: 100%;
    padding: $padding-vertical $padding-horizontal;
}

@mixin roboto($font-weight: 400, $font-size: 16, $line-height: 20) {
    font-family: "Roboto", sans-serif;
    @include font($font-weight, $font-size, $line-height);
}

@mixin ubuntu($font-weight: 700, $font-size: 28, $line-height: 32) {
    font-family: "Ubuntu", sans-serif;
    @include font($font-weight, $font-size, $line-height);
}

@mixin font($font-weight, $font-size, $line-height) {
    font-weight: $font-weight;
    font-size: toRem($font-size);
    line-height: toRem($line-height);
}
